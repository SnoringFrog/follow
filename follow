#!/bin/bash

# To use, source this file then use the command "follow"

# Use after a command that ends with a destination to "follow" the command to that location
# E.g., after a 'cp file newdir/filecopy', follow will take you to newdir/ 

function follow {
	func="${FUNCNAME[0]}"
	current_command=`history 1`

	#If follow is preceded inline with another command, get that command's final  argument
	#Otherwise, get the final argument from the previous command
	
	pre_follow_args=`echo $current_command | perl -spe "s/[0-9]*\s*$func.*//" -- -func=$func`
	if [[ -n "$pre_follow_args" ]]; then
		args=`echo $current_command | perl -pe 's/\;//g;' -spe 's/(.*?)$func.*/\1/' -- -func=$func`
	else
		args=`history 2 | head -n 1`
	fi

	eval arg_array=(`echo $args`)	
	dest="${arg_array[${#arg_array[@]}-1]}"	

	#If $dest is a valid destination, go to it
	dest="`eval echo ${dest//>}`" #expand ~, strip out potentially dangerous >
	if [[ -e "$dest" || -L "$dest" ]]; then
		if [[ ! -d "$dest" ]]; then
			dest=`dirname "$dest"`
		fi

		if [[ -d "$dest" ]]; then
			cd "$dest"
		fi
	else
		>&2 echo "$func: cannot follow to \"$dest\""	
	fi
}	
	# TODO: 
	# Add option to not follow if symlink is broken?
	# Allow multiple follows in one line

	#Old attempt at trying to handle multiple follow's in one line
	#Saved to reference for when I get around to supporting this
	#While current command contains "follow"...
	#while [[ "$current_command" == *"$func"* ]]; do

		#Get the argument before the first "follow"
	#	dest=`echo $current_command | perl -spe 's/(.*?)$func.*/\1/' -- -func=$func | awk '{print $NF}'`
	#	echo "Dest = $dest"
	
		#Go to that destination	
	#	dest="`eval echo ${dest//>}`" #expand ~, strip out potentially dangerous >
	#	if [[ -e "$dest" ]]; then
	#		if [[ -f "$dest" ]]; then
	#			dest=`dirname "$dest"`
	#		fi

	#		if [[ -d "$dest" ]]; then
	#			cd "$dest"
	#		fi
	#	else
	#		>&2 echo "Cannot follow to \"$dest\""	
	#	fi
		
		#Strip everything through the first "follow"
	#	current_command=`echo $current_command | perl -spe 's/.*?$func//' -- -func=$func | sed -e 's/^ *//' -e 's/ *$//'`	
	#	echo "Cmd = $current_command"

	#done
